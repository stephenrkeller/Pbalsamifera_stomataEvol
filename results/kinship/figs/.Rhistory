mutate(ind_code = paste(lapply(str_split(rep_code, "_"), '[[', 1),
lapply(str_split(rep_code, "_"), '[[', 2),
sep = "_"),
pop_code = paste(lapply(str_split(rep_code, "_"), '[[', 1))
) %>%
relocate(pop_code, .before = rep_code) %>%
as_tibble()
traits <- plyr::join_all(list(dis, z.s, eco),
by = "rep_code",
type = "full") %>%
relocate(pop_code, .before = rep_code) %>%
as_tibble()
names(traits)
table(is.na(traits$row))
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
relocate(pop_code, .before = rep_code) %>%
as_tibble()
names(traits)
table(is.na(traits$row_num))
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
select(-row, -col) %>%
mutate(row = row_num, col = tree_num) %>%
relocate(pop_code, .before = rep_code) %>%
as_tibble()
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
select(-row, -col) %>%
mutate(row = row_num, col = tree_num) %>%
relocate(pop_code, .before = rep_code) %>%
relocate(row, col .before = R1) %>%
as_tibble()
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
select(-row, -col) %>%
mutate(row = row_num, col = tree_num)
names(trais)
names(traits)
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
mutate(row = row_num, col = tree_num) %>%
select(-row_num, -tree_num) %>%
relocate(pop_code, .before = rep_code) %>%
relocate(row, col .before = R1) %>%
as_tibble()
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
mutate(row = row_num, col = tree_num) %>%
select(-row_num, -tree_num)
traits
names(traits)
table(is.na(traits$row))
table(is.na(traits$col))
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
mutate(row = row_num, col = tree_num) %>%
select(-row_num, -tree_num) %>%
relocate(pop_code, .before = rep_code) %>%
as_tibble()
names(traits)
rm(traits)
traits <- plyr::join_all(list(dis, z.s, eco, map),
by = "rep_code",
type = "full") %>%
mutate(row = row_num, col = tree_num) %>%
select(-row_num, -tree_num) %>%
relocate(pop_code, .before = rep_code) %>%
as_tibble()
names(traits)
# Save the rescaled data for easier read in.
write.table(traits,
"~/Dropbox/admap/results/data2go/replicate_values/trait_data_full_join_rescaled.txt",
quote = F, row.names = F, sep = '\t')
# Read in the ancestry data from hybrid traits and RASPberry
ganc <- read.table("~/Dropbox/admap/results/global_ancestry/global_ancestry_485inds.txt", T, '\t')
nh <- read.table("~/Dropbox/admap/results/data2go/ancestry/NewHybrids_Ancestry.txt",T,'\t')
# Combine with the trait data
dat <- plyr::join_all(list(traits, nh, ganc),
by = "ind_code",
match = "first") %>%
relocate(pop_code, ind_code, rep_code, prop_B, prop_T,
prop_A, prop_D, filial_call, ancestry1,
global_ancestry, row, col, .before = R1) %>%
as_tibble()
names(dat)
table(is.na(dat$row))
# Save it and fit some models!
write.table(dat,
"~/Dropbox/admap/results/data2go/replicate_values/traits_ancestry_all_inds.txt",
sep = "\t", quote = F, row.names = F)
The first hurdle is to get your SNP set for the phenotyped data set into (... a format acceptable)
# Read in the snps as diploid, biallelic data
snps <- read.table("~/Dropbox/oil_envr/data/snps/snps.custom.genpop.txt",T,'\t')
snps
head(snps)
str(snps)
# Read in the trait data for the test genotypes.
dat_in <- read.table("~/Dropbox/admap/results/data2go/replicate_values/traits_ancestry_all_inds.txt", T, '\t')
# Filter for balsam and trichocarpa inds
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep=" ")
) %>%
select(keep)
ind_set1
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep=" ")
)
table(ind_set1$ancestry1)
table(ind_set1$prop_B)
table(ind_set1$prop_T)
# Filter for balsam and trichocarpa inds
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep=" ")
) %>%
select(keep)
# This yields 351 balsam-only genotypes
write.table(ind_set1,
"~/Dropbox/admap/results/genotypes/pb_pt_pheno/ind_set1",
sep="\t", quote = F, row.names = F,
col.names = F)
length(keep)
dim(keep)
length(keep)
keep
dim(ind_set1)
1/427
2/427
inds418 = read.table("/home/kf/Dropbox/admap/results/genotypes/pb_pt_pheno/inds418",T)
inds418
ind_set1$keep %in% inds418$ind_code
ind_set1$keep %in% inds418$ind_code %>% table()
inds418
head(ind_set1)
# Filter for balsam and trichocarpa inds
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep="_")
) %>%
select(keep)
inds418 = read.table("/home/kf/Dropbox/admap/results/genotypes/pb_pt_pheno/inds418",T)
ind_set1$keep %in% inds418$ind_code %>% table()
ind_set1[ind_set1$keep %in% inds418$ind_code, "ind_code"]
ind_set1$keep %in% inds418$ind_code
ind_set1[ind_set1$keep %in% inds418$ind_code,]
ind_set1[!ind_set1$keep %in% inds418$ind_code,]
ind_set1[!ind_set1$keep %in% inds418$ind_code,]
ind_set1[!ind_set1$keep %in% inds418$ind_code,] -> missing
missing
dat_in %>% filter(ind_code %in% missing) %>% select(ancestry1)
dat_in %>% filter(ind_code %in% missing) %>% select(prop_B, prop_T, prop_A, prop_D)
dat_in %>% filter(ind_code %in% missing) %>% select(ind_code, prop_B, prop_T, prop_A, prop_D)
dat_in %>% filter(ind_code %in% missing) %>% select(ind_code, prop_B, prop_T, prop_A, prop_D) %>% distinct(ind_code)
dat_in %>% filter(ind_code %in% missing) %>% select(ind_code, prop_B, prop_T, prop_A, prop_D) %>% distinct(ind_code, .keep_all = T)
dat_in %>% filter(ind_code %in% missing) %>% select(ind_code, prop_B, prop_T, prop_A, prop_D) %>% distinct(ind_code, .keep_all = T)
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep="_")
)
table(ind_set1$ancestry1)
# Read in file of known angustifolia & deltoides hybirds
ang_del = read.table("~/Dropbox/admap/results/global_ancestry/ang_del_inds",T,'\t')
head(ang_del)
# Read in file of known angustifolia & deltoides hybirds
ang_del = read.table("~/Dropbox/admap/results/global_ancestry/ang_del_inds",F,'\t')
head(ang_del)
# Filter for balsam and trichocarpa inds
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
filter(!ind_code %in% ang_del) %>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep="_")
) %>%
select(keep)
dim(ind_set1)
ind_set1
ind_set1 %>% sort()
ind_set1 %>% order()
ind_set1[order(ind_set1),]
names(ang_del) <- "ind_code"
head(ang_del)
# Filter for balsam and trichocarpa inds
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
filter(!ind_code %in% ang_del$ind_code) %>%
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep="_")
) %>%
select(keep)
dim(keep)
length(keep)
keep
dim(ind_set1)
# This yields 351 balsam-only genotypes
write.table(ind_set1,
"~/Dropbox/admap/results/genotypes/pb_pt_pheno/ind_set1",
sep="\t", quote = F, row.names = F,
col.names = F)
# Filter for balsam and trichocarpa inds
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
filter(!ind_code %in% ang_del$ind_code) %>% # filter for ang_del
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep=" ")
) %>%
select(keep)
# This yields 351 balsam-only genotypes
write.table(ind_set1,
"~/Dropbox/admap/results/genotypes/pb_pt_pheno/ind_set1",
sep="\t", quote = F, row.names = F,
col.names = F)
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
filter(!ind_code %in% ang_del$ind_code) %>% # filter for ang_del
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep=" ")
ind_set1 <- dat_in %>%
filter(ancestry1 == "BxB" | ancestry1 == "BxT")%>%
filter(!ind_code %in% ang_del$ind_code) %>% # filter for ang_del
select(ind_code, ancestry1, prop_B, prop_T, global_ancestry) %>%
distinct(ind_code, .keep_all = TRUE) %>%
mutate(keep = paste(lapply(str_split(ind_code, "_"), '[[', 1 ),
lapply(str_split(ind_code, "_"), '[[', 2 ),
sep=" ")
)
table(ind_set1$ancestry1)
# Read in the data
snps_agh = read.table("~/Dropbox/admap/results/genotypes/pb_pt_pheno/pb_pt_418inds_30209snps.NoMissing.LD0.geno.raw",T,'\t')
dim(snps_agh)
names(snps_agh)[1:10]
?relocate
snps_agh <- snps_agh %>%
mutate(ind_code = paste(snps_agh$FID, snps_agh$IID, sep="_")) %>%
relocate(ind_code, .before = FID)
names(snps_agh)[1:10]
head(snps_agh)[1:10]
snps_agh <- snps_agh %>%
mutate(ind_code = paste(snps_agh$FID, formatC(snps_agh$IID, width=2, flag="0", sep="_"))) %>%
relocate(ind_code, .before = FID)
snps_agh <- snps_agh %>%
mutate(ind_code = paste(snps_agh$FID, formatC(snps_agh$IID, width=2, flag="0"), sep="_")) %>%
relocate(ind_code, .before = FID)
head(snps_agh)[1:10]
dim(snps_agh)
2/418
# Computing the additive relationship matrix based on VanRaden 2008
G <- Gmatrix(SNPmatrix = as.matrix(snps_agh[-c(1:7)]),
missingValue=-9,
maf=2/418,
method="VanRaden")
# Computing the additive relationship matrix based on VanRaden 2008
library(AGHmatrix)
G <- Gmatrix(SNPmatrix = as.matrix(snps_agh[-c(1:7)]),
missingValue=-9,
maf=2/418,
method="VanRaden")
# Set the row names to the ind_codes
row.names(G) <- snps_agh$ind_code
G
hist(G)
hist(abs(G))
?AGHmatrix
?Gmatrix
G > 1
G > 1 %>% table()
table(G > 1)
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
heatmap(G)
# View a histogram of the self-variance components (the diagonal)
h0 <- ggplot(data.frame(V1=diag(G)), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Self-variances of A")
h0
# View a histogram of the variance estimates.
h1 <- ggplot(data.frame(V1=G[upper.tri(G)]), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Covariances of A")
# View a histogram of kinship (i.e. co-variance estimates).
h1 <- ggplot(data.frame(V1=G[upper.tri(G)]), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Kinship values")
# Absolute value of covariance estimates
h2 <- ggplot(data.frame(V1=abs(G[upper.tri(G)])), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Absolute value of kinship")
# plot them together & save
pout <- cowplot::plot_grid(h0, h1, h2, ncol = 1, nrow = 3)
pout
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
pheat <- as.grob(heatmap(G))
?grob
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
pheat <- grob(heatmap(G))
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
pheat <- grid::grob(heatmap(G))
# Combine the kinship matrix and the histograms into a single plot.
cowplot::plot_grid(pheat, plot_grid(h0, h1, h2, ncol = 1), ncol = 2)
# Combine the kinship matrix and the histograms into a single plot.
cowplot::plot_grid(pheat, cowplot::plot_grid(h0, h1, h2, ncol = 1), ncol = 2)
pheat
plot(pheat)
grid.draw(pheat)
grid::grid.draw(pheat)
dev.off()
grid::grid.draw(pheat)
plot(1:10)
# Combine the kinship matrix and the histograms into a single plot.
cowplot::plot_grid(grid::grid.draw(pheat), cowplot::plot_grid(h0, h1, h2, ncol = 1), ncol = 2)
pout
table(G)
table(round(G,3))
table(round(G,2))
setwd("~/Dropbox/admap/results/kinship/figs")
cowplot::save_plot(
filename = "Kinship_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 6,
base_asp = 0.55,
base_width = NULL
)
cowplot::save_plot(
filename = "Kinship_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 7,
base_asp = 0.35,
base_width = NULL
)
cowplot::save_plot(
filename = "Kinship_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 7,
base_asp = 0.75,
base_width = NULL
)
# View a histogram of the self-variance components (the diagonal)
h0 <- ggplot(data.frame(V1=diag(G)), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Self-variances of G")
# View a histogram of kinship (i.e. co-variance estimates).
h1 <- ggplot(data.frame(V1=G[upper.tri(G)]), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Kinship values (covariances of G)")
# Absolute value of covariance estimates
h2 <- ggplot(data.frame(V1=abs(G[upper.tri(G)])), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Absolute value of kinship")
# plot them together & save
pout <- cowplot::plot_grid(h0, h1, h2, ncol = 2, nrow = 2)
cowplot::save_plot(
filename = "Kinship_histograms_v1.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 7,
base_asp = 0.75,
base_width = NULL
)
pout
# plot them together & save
pout <- cowplot::plot_grid(h0, h1, h2, ncol = 1, nrow = 3)
cowplot::save_plot(
filename = "Kinship_histograms_v1.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 7,
base_asp = 0.75,
base_width = NULL
)
cowplot::save_plot(
filename = "Kinship_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 7,
base_asp = 0.75,
base_width = NULL
)
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
heatmap(G)
# Save it
write.table(G,
file = "~/Dropbox/admap/results/kinship/G.matrix",
sep='\t',
row.names = T,
col.names = T,
quote = F)
# Save it
write.table(round(G, 3),
file = "~/Dropbox/admap/results/kinship/G.matrix",
sep='\t',
row.names = T,
col.names = T,
quote = F)
# Read in the  that is filtered for the test set
dat <- read.table("~/Dropbox/admap/results/data2go/replicate_values/traits_ancestry_test_set.txt", T, '\t')
dim(dat)
# This seems like a good simplification of the input variables.
mod1t <- brm(R1_p ~ z.SR + z.AR + z.D + z.S +
z.fs + z.gsmax +
z.CN + z.perc_C + z.perc_N +
z.D13C + z.D15N + z.SLA + z.CCI +
row + col + global_ancestry + (1|gr(ind_code, cov = G)),
data = test,
data2 = list(G = G),
family = bernoulli(link = "logit"),
control = list(max_treedepth = 15, adapt_delta = 0.9),
seed = 2398, chains = 2L, iter = 3000)
# Test inds only
test <- read.table("~/Dropbox/admap/results/data2go/replicate_values/traits_ancestry_test_set.txt", T, '\t')
head(test)
dim(test)
# This seems like a good simplification of the input variables.
mod1t <- brm(R1_p ~ z.SR + z.AR + z.D + z.S +
z.fs + z.gsmax +
z.CN + z.perc_C + z.perc_N +
z.D13C + z.D15N + z.SLA + z.CCI +
row + col + global_ancestry + (1|gr(ind_code, cov = G)),
data = test,
data2 = list(G = G),
family = bernoulli(link = "logit"),
control = list(max_treedepth = 15, adapt_delta = 0.9),
seed = 2398, chains = 2L, iter = 3000)
options(mc.cores = parallel::detectCores())
options(mc.cores)
mc.cores
options(mc.cores = parallel::detectCores())
names(test)
?brms
modD_S <- brm(z.d ~ z.s + row + col + (1|gr(ind_code, cov = G)),
data = test,
data2 = list(G = G),
family = lognormal(link= "identity", link_sigma = "log"),
control = list(max_treedepth = 15, adapt_delta = 0.9),
seed = 2398, chains = 2L, iter = 3000)
modD_S <- brm(z.d ~ z.s + row + col + (1|gr(ind_code, cov = G)),
data = test,
data2 = list(G = G),
family = lognormal(link= "identity", link_sigma = "log"),
control = list(max_treedepth = 15, adapt_delta = 0.9),
seed = 2398, chains = 2L, iter = 3000)
modD_s
names(test)
G
names(G)
modD_S <- brm(z.d ~ z.s + row + col + (1|gr(ind_code, cov = G)),
data = test,
data2 = list(G = G),
family = lognormal(link= "identity", link_sigma = "log"),
control = list(max_treedepth = 15, adapt_delta = 0.9),
seed = 2398, chains = 2L, iter = 3000)
q()
